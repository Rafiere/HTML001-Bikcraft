/* Esse projeto ainda não é responsivo, pois ele não está adaptado
 para o celular. */

body {

    /* Se no computador da pessoa tiver a "Arial", será exibida a "Arial". Se não
    existir, será exibida a "Helvetica", e se, mesmo assim, não existir, será exibida
    a "sans-serif", que é uma tipografia qualquer, genérica. Basicamente, essas são as
    tipografias padrão. */

    font-family: Arial, Helvetica, sans-serif;
    /* Estamos resetando a margem padrão do navegador. */
    background: #f7f7f7;
    display: grid;

    /* Esse "gap" será aplicado aos elementos que estão dentro dessa tag "body", ou seja, nos
    filhos diretos desse "body", como na primeira "<img>", que representa o título, na "<div>" que
    representa os botões e etc.

    O "gap" define o tamanho das linhas e das colunas de dentro do Grid, ou seja, a grossura
    deles.

    Se passarmos apenas um valor, será definido o mesmo tamanho para o "row-gap" e o
    "column-gap". Se definirmos dois valores, o primeiro valor será para o "row-gap" e o
    segundo valor será para o "column-gap". */

    gap: 60px;

    /* O "justifyItems" serve para alinharmos os itens do Grid na vertical. Nesse
    exemplo, estamos alinhando os itens ao centro. */

    justify-items: center;

    margin-top: 60px;
}

img {

    /* Esse elemento define um valor máximo para a largura do elemento. Se
     definirmos o max-width em 100%, por exemplo, a imagem não vai crescer
     mais do que a largura de seu container, ou elemento-pai, que, nesse exemplo, é o
     "body", ou seja, ela só vai crescer se o "body" crescer. */

    max-width: 100%;
    display: block;
}

a {
    /* Tirando o sublinhado de todos os links do site. */
    text-decoration: none;
}

p, h1, h2, h3 {
    /* Estamos aplicando o CSS Reset. */
    margin: 0px;
}

p {
    font-size: 1.25rem;
    line-height: 1.3;
}

ul {

    /* Estamos resetando o estilo padrão da lista. */

    list-style: none;
    margin: 0px;
    padding: 0px;
}

.menu {
    display: flex;

    /* Essa propriedade serve para o display quebrar se diminuirmos o
    tamanho do menu, ou seja, os botões do menu quebrarão para baixo ao
    invés da barra de rolagem lateral ser exibida. */

    flex-wrap: wrap;

    /* Quando a quebra de linha ocorrer, um espaço em branco ficará
     disponível, logo, quando isso acontecer, os botões do menu serão
     alinhados ao centro. */

    justify-content: center;

    /* Quando aplicamos o "gap" no "main-axis" de um display flex, isso
     indicará o espaço entre os itens do flex layout. Se a orientação do
     flex for "row", será o espaçamento entre os itens da linha, se for
     "column", será o espaçamento entre os itens da coluna. */

    /* Nesse exemplo, isso representa o espaçamento entre os botões. */

    gap: 20px;
}

.menu a {
    display: block;
    background: #FFFFFF;
    padding: 1rem 2rem;
    border-radius: 4px;
    color: #000000;
    text-transform: uppercase;

    /* Essa borda deve estar transparente para que, ao colocarmos o
    mouse sob esse botão, a borda não faça o botão pular, pois apenas a cor
    do botão será alterada, ao invés de uma margem ser inserida. */

    border: 2px solid transparent;
}

.menu a:hover {
    border-color: #E21
}

.header {
    display: grid;
    justify-items: center;
    gap: 60px;
}

.conteudo {
    display: grid;

    /* Estamos definindo que o grid terá duas colunas. */

    grid-template-columns: 1fr 1fr;

    /* Essa propriedade serve para o grid não crescer mais do que
    1000px se expandirmos a tela, ou seja, ao chegar em 1000px, o grid
    parará de crescer e as margens começarão a aparecer ao lado do grid. */

    max-width: 1000px;
}

.introducao {
    background: #FFF;

    /* O "padding" é a margem interna. Ele serve para desgrudarmos
    elementos da ponta. */

    padding: 40px;

    text-align: right;

    /* Quando definimos o "display: grid", por padrão, os elementos
    tentarão ocupar o máximo que eles conseguirem da altura e da largura
    do elemento que estão inseridos. Basicamente, ele tenta "esticar". */

    display: grid;

    /* Como definimos o container como o "display: grid", podemos
    utilizar  as propriedades de alinhamento para posicionarmos os
    elementos que estão dentro desse grid. */
    align-content: center;

    gap: 20px;

    /* Essa propriedade fará com que os elementos do grid fiquem alinhados
    na ponta. */

    justify-items: end;
}

.introducao h1 {
    font-size: 2rem;
}

/*.detalhe {*/
/*    width: 60px;*/
/*    height: 4px;*/
/*    background: #E21;*/

/*    !* Por padrão, o elemento "span" é um elemento "inline", então*/
/*    as propriedades "width" e "height" não terão efeito sob esse*/
/*    elemento, por isso, tivémos que definir o display desse elemento*/
/*    para o "inline-block". *!*/

/*    display: inline-block;*/

/*    !* O "position: relative" permite que definamos uma posição relativa*/
/*     para o elemento de acordo com o elemento-pai dele. *!*/

/*    position: relative;*/

/*    !* Estamos posicionando a 30px do topo e -30px da direita. *!*/

/*    top: -30px;*/
/*    right: -70px;*/
/*}*/

/* Estamos trocando o "span" por um pseudoelemento "before". */

.introducao::before {

    width: 60px;
    height: 4px;
    background: #E21;

    /* Por padrão, o elemento "span" é um elemento "inline", então
    as propriedades "width" e "height" não terão efeito sob esse
    elemento, por isso, tivémos que definir o display desse elemento
    para o "inline-block". */

    display: inline-block;

    /* O "position: relative" permite que definamos uma posição relativa
     para o elemento de acordo com o elemento-pai dele. */

    position: relative;

    /* Estamos posicionando a 30px do topo e -30px da direita. */

    top: -30px;
    right: -70px;

    /* Um pseudoelemento sempre deverá ter um "content" para existir. */

    content: ""
}

.botao {
    background: #E21;
    color: #FFF;
    padding: 1rem 2rem;
    border-radius: 4px;
    text-transform: uppercase;
}

.botao:hover {
    background: #900
}

.subtitulo {
    font-size: 4rem;
    text-transform: uppercase;
    color: rgba(0, 0, 0, 0.2);

    /* Essa propriedade serve para alinharmos o elemento à direita. */

    text-align: right;

    /* O "align-self" serve para conversarmos com um item específico dentro
    do grid, alinhando esse item ao centro. */

    align-self: center;
    padding: 40px;

    background-image: url("../assets/onda.svg")
}

.vantagens {
    background: #FFF;
    padding: 40px;
}

.vantagens-item {

    /* Estamos aplicando o "display: grid" em todos os elementos que
     a classe é "vantagens-item". */

    display: grid;

    /* O "grid-template-columns" serve para dividirmos o
     grid em colunas e definirmos o tamanho dessas colunas. */

    /* O "auto" pegará automaticamente o tamanho do item, nesse
    caso, como o primeiro elemento da coluna será o ícone SVG, o tamanho
    dessa coluna será o tamanho do ícone SVG. */

    grid-template-columns: auto 1fr;

    /* Quando utilizamos dois parâmetros no gap do "grid", o primeiro
    valor sempre será a distância entre as linhas, e o segundo valor sempre
    será a distância entre as colunas. */

    gap: 10px 20px;

    padding: 20px;
}

.vantagens-item:hover {
    border-left: 4px solid #e21;
}

.vantagens-item:nth-child(odd) {
    background: #F7F7F7;
}

.vantagens-item p {

    /* Por padrão, o "grid-column" dos "p" que possuem a
     classe "vantagens-item" seria na primeira coluna, porém, ao
    utilizarmos o "grid-column: 2", estamos definindo que ele
    ficará na segunda coluna, de forma forçada. */

    grid-column: 2;
}

.rodape {
    background: #FFF;

    padding: 40px;
    text-align: center;

    /* O width é somado com o padding e o border. Nesse
    caso, estamos falando que esse elemento possui
    100% + 40px à esquerda e 40px à direita, ou seja, 100%
    + 80px de width. Por isso que a barra de rolagem inferior
    aparece. Para alterarmos esse comportamento, utilizamos
    o "box-sizing: border-box", assim, estamos dizendo que
    não queremos mais que o "padding" e o "border" seja
    somado, respeitando apenas o tamanho do width, assim, o
    tamanho máximo será de 100%. */

    width: 100%;
    box-sizing: border-box;
}